{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"laminas-server üá∑üá∫ –†—É—Å—Å–∫–∏–º –≥—Ä–∞–∂–¥–∞–Ω–∞–º –ú—ã, —É—á–∞—Å—Ç–Ω–∏–∫–∏ Laminas, —Ä–æ–¥–∏–ª–∏—Å—å –∏ –∂–∏–≤–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∞—Ö. –£ –º–Ω–æ–≥–∏—Ö –∏–∑ –Ω–∞—Å –µ—Å—Ç—å –¥—Ä—É–∑—å—è, —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏ –∏ –∫–æ–ª–ª–µ–≥–∏ –∫–∞–∫ –≤ –†–æ—Å—Å–∏–∏, —Ç–∞–∫ –∏ –≤ –£–∫—Ä–∞–∏–Ω–µ. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∞—Å —Ä–æ–¥–∏–ª–∏—Å—å –≤ –†–æ—Å—Å–∏–∏. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∞—Å –∂–∏–≤—É—Ç –≤ –†–æ—Å—Å–∏–∏. –£ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –±–∞–±—É—à–∫–∏ –∏ –¥–µ–¥—É—à–∫–∏ —Å—Ä–∞–∂–∞–ª–∏—Å—å —Å —Ñ–∞—à–∏—Å—Ç–∞–º–∏ –≤–æ –í—Ç–æ—Ä–æ–π –º–∏—Ä–æ–≤–æ–π –≤–æ–π–Ω–µ. –ó–¥–µ—Å—å –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–∞—à–∏–∑–º. –£ –æ–¥–Ω–æ–≥–æ –∏–∑ –Ω–∞—Å –µ—Å—Ç—å —É–∫—Ä–∞–∏–Ω—Å–∫–∞—è —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞, –∫–æ—Ç–æ—Ä–∞—è —Å–ø–∞—Å–ª–∞—Å—å –∏–∑ –¥–æ–º–∞ –≤–º–µ—Å—Ç–µ —Å —Å—ã–Ω–æ–º. –ü–æ–µ–∑–¥ –∑–∞–¥–µ—Ä–∂–∞–ª—Å—è –∏–∑-–∑–∞ –±–æ–º–±–µ–∂–∫–∏ –Ω–∞ –¥–æ—Ä–æ–≥–µ –≤–ø–µ—Ä–µ–¥–∏. –£ –Ω–∞—Å –µ—Å—Ç—å –¥—Ä—É–∑—å—è, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä—è—á—É—Ç—Å—è –≤ –±–æ–º–±–æ—É–±–µ–∂–∏—â–∞—Ö. –ú—ã —Å —Ç—Ä–µ–≤–æ–≥–æ–π –∂–¥–µ–º –≤–µ—Å—Ç–æ—á–∫–∏ –æ—Ç –Ω–∏—Ö –ø–æ—Å–ª–µ –≤–æ–∑–¥—É—à–Ω—ã—Ö –Ω–∞–ª–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±–µ—Å–ø–æ—Ä—è–¥–æ—á–Ω–æ –Ω–∞–Ω–æ—Å—è—Ç —É–¥–∞—Ä—ã –∏ –ø–æ–ø–∞–¥–∞—é—Ç –ø–æ –±–æ–ª—å–Ω–∏—Ü–∞–º, —à–∫–æ–ª–∞–º, –¥–µ—Ç—Å–∫–∏–º —Å–∞–¥–∞–º –∏ –¥–æ–º–∞–º. –ú—ã –Ω–µ –±–µ—Ä–µ–º —ç—Ç–æ –∏–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –°–ú–ò. –ú—ã –Ω–∞–±–ª—é–¥–∞–µ–º —ç—Ç–æ –Ω–∞–ø—Ä—è–º—É—é. –í—ã –¥–æ–≤–µ—Ä—è–µ—Ç–µ –Ω–∞–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á—Ç–æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –∏ –º—ã –ø—Ä–æ—Å–∏–º –≤–∞—Å –¥–æ–≤–µ—Ä–∏—Ç—å—Å—è –Ω–∞–º –≤–Ω–æ–≤—å. –ú—ã –Ω—É–∂–¥–∞–µ–º—Å—è –≤ –ø–æ–º–æ—â–∏. –í—ã—Ö–æ–¥–∏—Ç–µ –∏ –ø—Ä–æ—Ç–µ—Å—Ç—É–π—Ç–µ –ø—Ä–æ—Ç–∏–≤ —ç—Ç–æ–π –±–µ—Å–ø–æ–ª–µ–∑–Ω–æ–π –≤–æ–π–Ω—ã. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫—Ä–æ–≤–æ–ø—Ä–æ–ª–∏—Ç–∏–µ. –°–∫–∞–∂–∏—Ç–µ \"–ù–µ—Ç –≤–æ–π–Ω–µ!\" üá∫üá∏ To Citizens of Russia We at Laminas come from all over the world. Many of us have friends, family and colleagues in both Russia and Ukraine. Some of us were born in Russia. Some of us currently live in Russia. Some have grandparents who fought Nazis in World War II. Nobody here supports fascism. One team member has a Ukrainian relative who fled her home with her son. The train was delayed due to bombing on the road ahead. We have friends who are hiding in bomb shelters. We anxiously follow up on them after the air raids, which indiscriminately fire at hospitals, schools, kindergartens and houses. We're not taking this from any media. These are our actual experiences. You trust us enough to use our software. We ask that you trust us to say the truth on this. We need your help. Go out and protest this unnecessary war. Stop the bloodshed. Say \"stop the war!\" The laminas-server family of classes provides functionality for the various server classes, including laminas-json-server , laminas-soap and laminas-xmlrpc . Laminas\\Server\\Server provides an interface that mimics PHP‚Äôs SoapServer class; all RPC-style server classes should implement this interface in order to provide a standard server API. File issues at https://github.com/laminas/laminas-server/issues Documentation is at https://docs.laminas.dev/laminas-server/","title":"Home"},{"location":"#laminas-server","text":"","title":"laminas-server"},{"location":"#_1","text":"–ú—ã, —É—á–∞—Å—Ç–Ω–∏–∫–∏ Laminas, —Ä–æ–¥–∏–ª–∏—Å—å –∏ –∂–∏–≤–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∞—Ö. –£ –º–Ω–æ–≥–∏—Ö –∏–∑ –Ω–∞—Å –µ—Å—Ç—å –¥—Ä—É–∑—å—è, —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏ –∏ –∫–æ–ª–ª–µ–≥–∏ –∫–∞–∫ –≤ –†–æ—Å—Å–∏–∏, —Ç–∞–∫ –∏ –≤ –£–∫—Ä–∞–∏–Ω–µ. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∞—Å —Ä–æ–¥–∏–ª–∏—Å—å –≤ –†–æ—Å—Å–∏–∏. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∞—Å –∂–∏–≤—É—Ç –≤ –†–æ—Å—Å–∏–∏. –£ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –±–∞–±—É—à–∫–∏ –∏ –¥–µ–¥—É—à–∫–∏ —Å—Ä–∞–∂–∞–ª–∏—Å—å —Å —Ñ–∞—à–∏—Å—Ç–∞–º–∏ –≤–æ –í—Ç–æ—Ä–æ–π –º–∏—Ä–æ–≤–æ–π –≤–æ–π–Ω–µ. –ó–¥–µ—Å—å –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–∞—à–∏–∑–º. –£ –æ–¥–Ω–æ–≥–æ –∏–∑ –Ω–∞—Å –µ—Å—Ç—å —É–∫—Ä–∞–∏–Ω—Å–∫–∞—è —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞, –∫–æ—Ç–æ—Ä–∞—è —Å–ø–∞—Å–ª–∞—Å—å –∏–∑ –¥–æ–º–∞ –≤–º–µ—Å—Ç–µ —Å —Å—ã–Ω–æ–º. –ü–æ–µ–∑–¥ –∑–∞–¥–µ—Ä–∂–∞–ª—Å—è –∏–∑-–∑–∞ –±–æ–º–±–µ–∂–∫–∏ –Ω–∞ –¥–æ—Ä–æ–≥–µ –≤–ø–µ—Ä–µ–¥–∏. –£ –Ω–∞—Å –µ—Å—Ç—å –¥—Ä—É–∑—å—è, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä—è—á—É—Ç—Å—è –≤ –±–æ–º–±–æ—É–±–µ–∂–∏—â–∞—Ö. –ú—ã —Å —Ç—Ä–µ–≤–æ–≥–æ–π –∂–¥–µ–º –≤–µ—Å—Ç–æ—á–∫–∏ –æ—Ç –Ω–∏—Ö –ø–æ—Å–ª–µ –≤–æ–∑–¥—É—à–Ω—ã—Ö –Ω–∞–ª–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±–µ—Å–ø–æ—Ä—è–¥–æ—á–Ω–æ –Ω–∞–Ω–æ—Å—è—Ç —É–¥–∞—Ä—ã –∏ –ø–æ–ø–∞–¥–∞—é—Ç –ø–æ –±–æ–ª—å–Ω–∏—Ü–∞–º, —à–∫–æ–ª–∞–º, –¥–µ—Ç—Å–∫–∏–º —Å–∞–¥–∞–º –∏ –¥–æ–º–∞–º. –ú—ã –Ω–µ –±–µ—Ä–µ–º —ç—Ç–æ –∏–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –°–ú–ò. –ú—ã –Ω–∞–±–ª—é–¥–∞–µ–º —ç—Ç–æ –Ω–∞–ø—Ä—è–º—É—é. –í—ã –¥–æ–≤–µ—Ä—è–µ—Ç–µ –Ω–∞–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á—Ç–æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –∏ –º—ã –ø—Ä–æ—Å–∏–º –≤–∞—Å –¥–æ–≤–µ—Ä–∏—Ç—å—Å—è –Ω–∞–º –≤–Ω–æ–≤—å. –ú—ã –Ω—É–∂–¥–∞–µ–º—Å—è –≤ –ø–æ–º–æ—â–∏. –í—ã—Ö–æ–¥–∏—Ç–µ –∏ –ø—Ä–æ—Ç–µ—Å—Ç—É–π—Ç–µ –ø—Ä–æ—Ç–∏–≤ —ç—Ç–æ–π –±–µ—Å–ø–æ–ª–µ–∑–Ω–æ–π –≤–æ–π–Ω—ã. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫—Ä–æ–≤–æ–ø—Ä–æ–ª–∏—Ç–∏–µ. –°–∫–∞–∂–∏—Ç–µ \"–ù–µ—Ç –≤–æ–π–Ω–µ!\"","title":"üá∑üá∫ –†—É—Å—Å–∫–∏–º –≥—Ä–∞–∂–¥–∞–Ω–∞–º"},{"location":"#to-citizens-of-russia","text":"We at Laminas come from all over the world. Many of us have friends, family and colleagues in both Russia and Ukraine. Some of us were born in Russia. Some of us currently live in Russia. Some have grandparents who fought Nazis in World War II. Nobody here supports fascism. One team member has a Ukrainian relative who fled her home with her son. The train was delayed due to bombing on the road ahead. We have friends who are hiding in bomb shelters. We anxiously follow up on them after the air raids, which indiscriminately fire at hospitals, schools, kindergartens and houses. We're not taking this from any media. These are our actual experiences. You trust us enough to use our software. We ask that you trust us to say the truth on this. We need your help. Go out and protest this unnecessary war. Stop the bloodshed. Say \"stop the war!\" The laminas-server family of classes provides functionality for the various server classes, including laminas-json-server , laminas-soap and laminas-xmlrpc . Laminas\\Server\\Server provides an interface that mimics PHP‚Äôs SoapServer class; all RPC-style server classes should implement this interface in order to provide a standard server API. File issues at https://github.com/laminas/laminas-server/issues Documentation is at https://docs.laminas.dev/laminas-server/","title":"üá∫üá∏ To Citizens of Russia"},{"location":"v2/intro/","text":"Introduction The laminas-server family of classes provides functionality for the various server classes, including laminas-xmlrpc and laminas-json-server . Laminas\\Server\\Server provides an interface that mimics PHP‚Äôs SoapServer class; all RPC-style server classes should implement this interface in order to provide a standard server API. The Laminas\\Server\\Reflection tree provides a standard mechanism for performing function and class introspection for use as callbacks with the server classes, and provides data suitable for use with Laminas\\Server\\Server 's getFunctions() and loadFunctions() methods.","title":"Introduction"},{"location":"v2/intro/#introduction","text":"The laminas-server family of classes provides functionality for the various server classes, including laminas-xmlrpc and laminas-json-server . Laminas\\Server\\Server provides an interface that mimics PHP‚Äôs SoapServer class; all RPC-style server classes should implement this interface in order to provide a standard server API. The Laminas\\Server\\Reflection tree provides a standard mechanism for performing function and class introspection for use as callbacks with the server classes, and provides data suitable for use with Laminas\\Server\\Server 's getFunctions() and loadFunctions() methods.","title":"Introduction"},{"location":"v2/reflection/","text":"Laminas\\Server\\Reflection Laminas\\Server\\Reflection provides a standard mechanism for performing function and class introspection for use with server classes. It is based on PHP's Reflection API, augmenting it with methods for retrieving parameter and return value types and descriptions, a full list of function and method prototypes (i.e., all possible valid calling combinations), and function or method descriptions. Typically, this functionality will only be used by developers of RPC-style server classes for the framework. Usage Basic usage is as follows: use My\\Entity; use Laminas\\Server\\Reflection; $class = Reflection::reflectClass(Entity::class); $function = Reflection::reflectFunction('my_function'); // Get prototypes $prototypes = $function-&gt;getPrototypes(); // Loop through each prototype for the function foreach ($prototypes as $prototype) { // Get prototype return type printf(\"Return type: %s\\n\", $prototype-&gt;getReturnType()); // Get prototype parameters $parameters = $prototype-&gt;getParameters(); echo \"Parameters: \\n\"; foreach ($parameters as $parameter) { // Get parameter type printf(\" %s\\n\", $parameter-&gt;getType()); } } // Get namespace for a class, function, or method. // Namespaces may be set at instantiation time (second argument), or using // setNamespace(). $class-&gt;getNamespace(); reflectFunction() returns a Laminas\\Server\\Reflection\\Function object; reflectClass() returns a Laminas\\Server\\Reflection\\Class object. Please refer to the API documentation to see what methods are available to each.","title":"Reflection"},{"location":"v2/reflection/#laminasserverreflection","text":"Laminas\\Server\\Reflection provides a standard mechanism for performing function and class introspection for use with server classes. It is based on PHP's Reflection API, augmenting it with methods for retrieving parameter and return value types and descriptions, a full list of function and method prototypes (i.e., all possible valid calling combinations), and function or method descriptions. Typically, this functionality will only be used by developers of RPC-style server classes for the framework.","title":"Laminas\\Server\\Reflection"},{"location":"v2/reflection/#usage","text":"Basic usage is as follows: use My\\Entity; use Laminas\\Server\\Reflection; $class = Reflection::reflectClass(Entity::class); $function = Reflection::reflectFunction('my_function'); // Get prototypes $prototypes = $function-&gt;getPrototypes(); // Loop through each prototype for the function foreach ($prototypes as $prototype) { // Get prototype return type printf(\"Return type: %s\\n\", $prototype-&gt;getReturnType()); // Get prototype parameters $parameters = $prototype-&gt;getParameters(); echo \"Parameters: \\n\"; foreach ($parameters as $parameter) { // Get parameter type printf(\" %s\\n\", $parameter-&gt;getType()); } } // Get namespace for a class, function, or method. // Namespaces may be set at instantiation time (second argument), or using // setNamespace(). $class-&gt;getNamespace(); reflectFunction() returns a Laminas\\Server\\Reflection\\Function object; reflectClass() returns a Laminas\\Server\\Reflection\\Class object. Please refer to the API documentation to see what methods are available to each.","title":"Usage"},{"location":"v3/intro/","text":"Introduction The laminas-server family of classes provides functionality for the various server classes, including laminas-json-server , laminas-soap and laminas-xmlrpc . Laminas\\Server\\Server provides an interface that mimics PHP‚Äôs SoapServer class; all RPC-style server classes should implement this interface in order to provide a standard server API. The Laminas\\Server\\Reflection tree provides a standard mechanism for performing function and class introspection for use as callbacks with the server classes, and provides data suitable for use with Laminas\\Server\\Server 's getFunctions() and loadFunctions() methods.","title":"Introduction"},{"location":"v3/intro/#introduction","text":"The laminas-server family of classes provides functionality for the various server classes, including laminas-json-server , laminas-soap and laminas-xmlrpc . Laminas\\Server\\Server provides an interface that mimics PHP‚Äôs SoapServer class; all RPC-style server classes should implement this interface in order to provide a standard server API. The Laminas\\Server\\Reflection tree provides a standard mechanism for performing function and class introspection for use as callbacks with the server classes, and provides data suitable for use with Laminas\\Server\\Server 's getFunctions() and loadFunctions() methods.","title":"Introduction"},{"location":"v3/reflection/","text":"Laminas\\Server\\Reflection Laminas\\Server\\Reflection provides a standard mechanism for performing function and class introspection for use with server classes. It is based on PHP's Reflection API, augmenting it with methods for retrieving parameter and return value types and descriptions, a full list of function and method prototypes (i.e., all possible valid calling combinations), and function or method descriptions. Typically, this functionality will only be used by developers of RPC-style server classes for the framework. Usage Basic usage is as follows: use My\\Entity; use Laminas\\Server\\Reflection; $class = Reflection::reflectClass(Entity::class); $function = Reflection::reflectFunction('my_function'); // Get prototypes $prototypes = $function-&gt;getPrototypes(); // Loop through each prototype for the function foreach ($prototypes as $prototype) { // Get prototype return type printf(\"Return type: %s\\n\", $prototype-&gt;getReturnType()); // Get prototype parameters $parameters = $prototype-&gt;getParameters(); echo \"Parameters: \\n\"; foreach ($parameters as $parameter) { // Get parameter type printf(\" %s\\n\", $parameter-&gt;getType()); } } // Get namespace for a class, function, or method. // Namespaces may be set at instantiation time (second argument), or using // setNamespace(). $class-&gt;getNamespace(); reflectFunction() returns a Laminas\\Server\\Reflection\\ReflectionFunction object; reflectClass() returns a Laminas\\Server\\Reflection\\ReflectionClass object.","title":"Reflection"},{"location":"v3/reflection/#laminasserverreflection","text":"Laminas\\Server\\Reflection provides a standard mechanism for performing function and class introspection for use with server classes. It is based on PHP's Reflection API, augmenting it with methods for retrieving parameter and return value types and descriptions, a full list of function and method prototypes (i.e., all possible valid calling combinations), and function or method descriptions. Typically, this functionality will only be used by developers of RPC-style server classes for the framework.","title":"Laminas\\Server\\Reflection"},{"location":"v3/reflection/#usage","text":"Basic usage is as follows: use My\\Entity; use Laminas\\Server\\Reflection; $class = Reflection::reflectClass(Entity::class); $function = Reflection::reflectFunction('my_function'); // Get prototypes $prototypes = $function-&gt;getPrototypes(); // Loop through each prototype for the function foreach ($prototypes as $prototype) { // Get prototype return type printf(\"Return type: %s\\n\", $prototype-&gt;getReturnType()); // Get prototype parameters $parameters = $prototype-&gt;getParameters(); echo \"Parameters: \\n\"; foreach ($parameters as $parameter) { // Get parameter type printf(\" %s\\n\", $parameter-&gt;getType()); } } // Get namespace for a class, function, or method. // Namespaces may be set at instantiation time (second argument), or using // setNamespace(). $class-&gt;getNamespace(); reflectFunction() returns a Laminas\\Server\\Reflection\\ReflectionFunction object; reflectClass() returns a Laminas\\Server\\Reflection\\ReflectionClass object.","title":"Usage"},{"location":"v3/reference/migration/","text":"Migration to version 3.0 Starting in version 3.0, we offer a few changes affecting the following that you should be aware of, and potentially update your application to adopt: PHP 7.2 support Starting in 3.0 this component supports only PHP 7.2+. Strict Typing Argument type declarations have been added. Passing a wrong argument type which previously might have worked will now raise a TypeError . Signature changes The following signatures changed that could affect class extension and/or consumers. Interface suffix For consistency with the rest of the project, where we have standardized on the Interface suffix, the Server interface has been renamed to ServerInterface and the Client interface to ClientInterface . Reflection Previously the non-represented state of $argv in the reflectClass() and reflectFunction() methods was false. This changed to null . To represent a non-present state of $namespace in the reflectClass() and reflectFunction() , the default value changed from an empty string to null . Server Namespacing is not required by all Server implementations and thus optional. Method argument type declarations have been updated to reflect this state. addFunction and setClass methods now accept namespace variables of nullable strings, where previously they suggested a string -only usage.","title":"Migration"},{"location":"v3/reference/migration/#migration-to-version-30","text":"Starting in version 3.0, we offer a few changes affecting the following that you should be aware of, and potentially update your application to adopt:","title":"Migration to version 3.0"},{"location":"v3/reference/migration/#php-72-support","text":"Starting in 3.0 this component supports only PHP 7.2+.","title":"PHP 7.2 support"},{"location":"v3/reference/migration/#strict-typing","text":"Argument type declarations have been added. Passing a wrong argument type which previously might have worked will now raise a TypeError .","title":"Strict Typing"},{"location":"v3/reference/migration/#signature-changes","text":"The following signatures changed that could affect class extension and/or consumers.","title":"Signature changes"}]}