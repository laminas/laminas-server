{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"laminas-server The laminas-server family of classes provides functionality for the various server classes, including Laminas\\XmlRpc\\Server and Laminas\\Json\\Server . Laminas\\Server\\Server provides an interface that mimics PHP 5’s SoapServer class; all server classes should implement this interface in order to provide a standard server API. File issues at https://github.com/laminas/laminas-server/issues Documentation is at https://docs.laminas.dev/laminas-server/","title":"Home"},{"location":"#laminas-server","text":"The laminas-server family of classes provides functionality for the various server classes, including Laminas\\XmlRpc\\Server and Laminas\\Json\\Server . Laminas\\Server\\Server provides an interface that mimics PHP 5’s SoapServer class; all server classes should implement this interface in order to provide a standard server API. File issues at https://github.com/laminas/laminas-server/issues Documentation is at https://docs.laminas.dev/laminas-server/","title":"laminas-server"},{"location":"intro/","text":"Introduction The laminas-server family of classes provides functionality for the various server classes, including laminas-xmlrpc and laminas-json-server . Laminas\\Server\\Server provides an interface that mimics PHP’s SoapServer class; all RPC-style server classes should implement this interface in order to provide a standard server API. The Laminas\\Server\\Reflection tree provides a standard mechanism for performing function and class introspection for use as callbacks with the server classes, and provides data suitable for use with Laminas\\Server\\Server 's getFunctions() and loadFunctions() methods.","title":"Intro"},{"location":"intro/#introduction","text":"The laminas-server family of classes provides functionality for the various server classes, including laminas-xmlrpc and laminas-json-server . Laminas\\Server\\Server provides an interface that mimics PHP’s SoapServer class; all RPC-style server classes should implement this interface in order to provide a standard server API. The Laminas\\Server\\Reflection tree provides a standard mechanism for performing function and class introspection for use as callbacks with the server classes, and provides data suitable for use with Laminas\\Server\\Server 's getFunctions() and loadFunctions() methods.","title":"Introduction"},{"location":"reflection/","text":"Laminas\\Server\\Reflection Laminas\\Server\\Reflection provides a standard mechanism for performing function and class introspection for use with server classes. It is based on PHP's Reflection API, augmenting it with methods for retrieving parameter and return value types and descriptions, a full list of function and method prototypes (i.e., all possible valid calling combinations), and function or method descriptions. Typically, this functionality will only be used by developers of RPC-style server classes for the framework. Usage Basic usage is as follows: use My\\Entity; use Laminas\\Server\\Reflection; $class = Reflection::reflectClass(Entity::class); $function = Reflection::reflectFunction('my_function'); // Get prototypes $prototypes = $function-&gt;getPrototypes(); // Loop through each prototype for the function foreach ($prototypes as $prototype) { // Get prototype return type printf(\"Return type: %s\\n\", $prototype-&gt;getReturnType()); // Get prototype parameters $parameters = $prototype-&gt;getParameters(); echo \"Parameters: \\n\"; foreach ($parameters as $parameter) { // Get parameter type printf(\" %s\\n\", $parameter-&gt;getType()); } } // Get namespace for a class, function, or method. // Namespaces may be set at instantiation time (second argument), or using // setNamespace(). $class-&gt;getNamespace(); reflectFunction() returns a Laminas\\Server\\Reflection\\Function object; reflectClass() returns a Laminas\\Server\\Reflection\\Class object. Please refer to the API documentation to see what methods are available to each.","title":"Reflection"},{"location":"reflection/#laminasserverreflection","text":"Laminas\\Server\\Reflection provides a standard mechanism for performing function and class introspection for use with server classes. It is based on PHP's Reflection API, augmenting it with methods for retrieving parameter and return value types and descriptions, a full list of function and method prototypes (i.e., all possible valid calling combinations), and function or method descriptions. Typically, this functionality will only be used by developers of RPC-style server classes for the framework.","title":"Laminas\\Server\\Reflection"},{"location":"reflection/#usage","text":"Basic usage is as follows: use My\\Entity; use Laminas\\Server\\Reflection; $class = Reflection::reflectClass(Entity::class); $function = Reflection::reflectFunction('my_function'); // Get prototypes $prototypes = $function-&gt;getPrototypes(); // Loop through each prototype for the function foreach ($prototypes as $prototype) { // Get prototype return type printf(\"Return type: %s\\n\", $prototype-&gt;getReturnType()); // Get prototype parameters $parameters = $prototype-&gt;getParameters(); echo \"Parameters: \\n\"; foreach ($parameters as $parameter) { // Get parameter type printf(\" %s\\n\", $parameter-&gt;getType()); } } // Get namespace for a class, function, or method. // Namespaces may be set at instantiation time (second argument), or using // setNamespace(). $class-&gt;getNamespace(); reflectFunction() returns a Laminas\\Server\\Reflection\\Function object; reflectClass() returns a Laminas\\Server\\Reflection\\Class object. Please refer to the API documentation to see what methods are available to each.","title":"Usage"}]}